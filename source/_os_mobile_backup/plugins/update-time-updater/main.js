/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UpdateTimeUpdaterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  updateKey: "updated",
  datetimeFormat: "YYYY-MM-DD HH:mm:ss"
};
var UpdateTimeUpdaterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Target key").setDesc("Frontmatter key for modification date").addText((text) => text.setPlaceholder("updated").setValue(this.plugin.settings.updateKey).onChange(async (value) => {
      this.plugin.settings.updateKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Datetime format").setDesc("Moments.js date format to use").addText((text) => text.setPlaceholder("YYYY-MM-DD HH:mm:ss").setValue(this.plugin.settings.datetimeFormat).onChange(async (value) => {
      this.plugin.settings.datetimeFormat = value;
      await this.plugin.saveSettings();
    }));
  }
};
var UpdateTimeUpdaterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("timer", "Update modified date", (evt) => {
      this.updateFrontmatter();
    });
    this.addCommand({
      id: "update-modified-datetime-manually",
      name: "Update modified datetime manually",
      callback: () => {
        this.updateFrontmatter();
      }
    });
    this.addSettingTab(new UpdateTimeUpdaterSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async updateFrontmatter() {
    var _a;
    const now = (0, import_obsidian.moment)();
    const f = this.app.workspace.getActiveFile();
    if (f == null) {
      new import_obsidian.Notice(`Could not get active file.`);
      return;
    }
    const fm = (_a = this.app.metadataCache.getFileCache(f)) == null ? void 0 : _a.frontmatter;
    if (fm == void 0) {
      new import_obsidian.Notice(`No frontmatter found.`);
      return;
    }
    this.app.fileManager.processFrontMatter(f, (frontmatter) => {
      if (frontmatter[this.settings.updateKey] == void 0) {
        new import_obsidian.Notice(`Could not find target key '${this.settings.updateKey}'.`);
        return;
      }
      frontmatter[this.settings.updateKey] = now.format(this.settings.datetimeFormat);
      new import_obsidian.Notice(`Value of '${this.settings.updateKey}' has been updated.`);
    });
  }
};

/* nosourcemap */